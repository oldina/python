#Задание 1
#Известно, что генеральная совокупность распределена нормально со средним квадратическим отклонением, равным 16. 
#Найти доверительный интервал для оценки математического ожидания a с надежностью 0.95, если выборочная средняя M = 80, 
#а объем выборки n = 256.

#При известной сигма генеральной совокупности используем z-критерий для расчета доверительного интервала.
left=80-1.96*16/256**0.5
right=80+1.96*16/256**0.5
print(f'>>> Доверительный интервал: [{left} ; {right}].')

#Задание 2
#В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью, получены опытные 
# данные: 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1 Предполагая, что результаты измерений подчинены нормальному 
# закону распределения вероятностей, оценить истинное значение величины X при помощи доверительного интервала, покрывающего 
# это значение с доверительной вероятностью 0,95. 

#Если сигма неизвестна, находим ее по формуле для несмещенного стандартного отклонения 
import math
import numpy as np
import scipy.stats as stats
array = [6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1]
n = len(array)
x = np.mean(array)
print(f'>>> Среднее арифметическое: {x}')
a = 0.05
sigma = np.std(array, ddof=1)
print(f'>>> Среднее квадратическое отклонение (несмещенное): {sigma}')
stats = stats.t.ppf( 1-a/2, n-1)
print(f'>>> Значение t-критерия для {1-a}% доверительного интервала: {stats}')
left = x-stats*sigma/np.sqrt(n)
right = x+stats*sigma/np.sqrt(n)
print(f'>>> Доверительный интервал для величины "X" составляет: [{left:.3f} ; {right:.3f}]')


#Задание 3
#Рост дочерей 175, 167, 154, 174, 178, 148, 160, 167, 169, 170 Рост матерей  178, 165, 165, 173, 168, 155, 160, 164, 178, 175
# Используя эти данные построить 95% доверительный интервал для разности среднего роста родителей и детей.
import math
import numpy as np
import scipy.stats as stats
mum = np.array([178, 165, 165, 173, 168, 155, 160, 164, 178, 175])
daut = np.array([175, 167, 154, 174, 178, 148, 160, 167, 169, 170])
m = len(mum)
d = len(daut)
print(m, d)
a = 0.975
means = np.mean(mum) - np.mean(daut)
error = np.sqrt(np.var(mum, ddof=1)/m + np.var(daut, ddof=1)/d)
t_crit = stats.t.ppf( a, m+n-2 )
left = means - t_crit * error
right = means + t_crit * error

print(f'>>> 95% доверительный интервал для разности среднего роста родителей и детей: [{left:.2f}, {right:.2f}]')


